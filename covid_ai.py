# -*- coding: utf-8 -*-
"""COVID_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jEvMEKfV4fAfRf4kWzyFm-jsbdGumTv-
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from datetime import datetime 
#importing data from 
from google.colab import drive
drive.mount("/content/drive")
# %cd ../
# %cd /content/drive/Shared\ drives/Maleen_Kidiwela_Shared_Drive/AI/train
!pwd
!ls

def get_index_positions(list_of_elems, element):
    ''' Returns the indexes of all occurrences of give element in
    the list- listOfElements '''
    index_pos_list = []
    index_pos = 0
    while True:
        try:
            # Search for item in list from indexPos to the end of list
            index_pos = list_of_elems.index(element, index_pos)
            # Add the index position in list
            index_pos_list.append(index_pos)
            index_pos += 1
        except ValueError as e:
            break
    return index_pos_list

conditions = pd.read_csv("conditions.csv")
patients = pd.read_csv("patients.csv")
observations = pd.read_csv("observations.csv")
careplans = pd.read_csv("careplans.csv")
encounters = pd.read_csv("encounters.csv")
devices = pd.read_csv("devices.csv")
supplies = pd.read_csv("supplies.csv")
procedures = pd.read_csv("procedures.csv")
medications = pd.read_csv("medications.csv")

ID = list(patients.Id)
IDenc = list(encounters.PATIENT)
birth = list(patients.BIRTHDATE)
death = list(patients.DEATHDATE)
race = list(patients.RACE)
ethnicity = list(patients.ETHNICITY)
state = list(patients.STATE)
enc_start = list(encounters.START)
enc_end = list(encounters.STOP)
enc_code = list(encounters.CODE)
coverage = list(patients.HEALTHCARE_COVERAGE)
covid_patient_id=conditions[conditions.CODE ==840539006].PATIENT.unique()
negative_covid_patient_ids = observations[(observations.CODE =='94531-1')& (observations.VALUE == 'Not detected (qualifier value)')].PATIENT.unique()
inpatients_ids = encounters[(encounters.REASONCODE == 840539006) & (encounters.CODE == 1505002)].PATIENT
deceased_ids = np.intersect1d(covid_patient_id,patients[patients.DEATHDATE.notna()].Id)
vent_ids = procedures[(procedures.CODE == 26763009)&(procedures.PATIENT.isin(covid_patient_id))].PATIENT
icu_ids = encounters[(encounters.CODE == 305351004)&(encounters.PATIENT.isin(covid_patient_id))].PATIENT
ID[296]
encounters.DESCRIPTION[13]
x_train = pd.DataFrame()
y_train = pd.DataFrame()
a = list(range(111000,111500))#len(ID)
for x in a:
  x_train.loc[x,'ID'] = ID[x]
  y_train.loc[x,'ID'] = ID[x]
  x_train.loc[x,'race'] = race[x]
  x_train.loc[x,'ethnicity'] = ethnicity[x]
  x_train.loc[x,'State'] = state[x]
  x_train.loc[x,'coverage'] = coverage[x]

  if ID[x] in covid_patient_id:
    y_train.loc[x,'Covid_Status'] = 1
  elif ID[x] in negative_covid_patient_ids:
    y_train.loc[x,'Covid_Status'] = 0
  else:
    y_train.loc[x,'Covid_Status'] = 0

  if ID[x] not in deceased_ids:
    y_train.loc[x,'Alive_Status'] = 1
    b_date = datetime.strptime(birth[x], '%Y-%m-%d')
    d_date = datetime.today()
    x_train.loc[x,'age']= int((d_date-b_date).days/365)
  else:
    y_train.loc[x,'Alive_Status'] = 0
    b_date = datetime.strptime(birth[x], '%Y-%m-%d')
    d_date = datetime.strptime(death[x], '%Y-%m-%d')
    x_train.loc[x,'age']= int((d_date-b_date).days/365)

  if ID[x] in inpatients_ids:
    y_train.loc[x,'COVID_Hospitalization'] = 1
    ind0 = get_index_positions(IDenc,ID[x])
    ind1 = get_index_positions(enc_code,1505002)
    ind2 = list(set(ind0) & set(ind2))
    if not not ind2:
      b = datetime.strptime((enc_end[int(ind2[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      c = datetime.strptime((enc_start[int(ind2[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      y_train.loc[x,'DaysinHospitalization'] = round(((b-c).seconds//3600)/24,2)
    else:
      y_train.loc[x,'DaysinHospitalization'] = 0
  else:
    y_train.loc[x,'COVID_Hospitalization'] = 0
    y_train.loc[x,'DaysinHospitalization'] = 0

  if ID[x] in vent_ids:
    y_train.loc[x,'Ventilator_Status'] = 1
  else:
    y_train.loc[x,'Ventilator_Status'] = 0

  if ID[x] in icu_ids:
    y_train.loc[x,'ICU_Status'] = 1
    ind3 = get_index_positions(IDenc,ID[x])
    ind4 = get_index_positions(enc_code,305351004)
    ind5 = list(set(ind3) & set(ind4))
    if not not ind5:
      d = datetime.strptime((enc_end[int(ind5[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      e = datetime.strptime((enc_start[int(ind5[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      y_train.loc[x,'DaysinICU'] = round(((d-e).seconds//3600)/24,3)
    else:
      y_train.loc[x,'DaysinICU'] = 0
  else:
    y_train.loc[x,'ICU_Status'] = 0
    y_train.loc[x,'DaysinICU'] = 0

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount("/content/drive")
# %cd ../
# %cd /content/drive/Shared\ drives/Maleen_Kidiwela_Shared_Drive/AI/test
!pwd
!ls

conditions = pd.read_csv("conditions.csv")
patients = pd.read_csv("patients.csv")
observations = pd.read_csv("observations.csv")
careplans = pd.read_csv("careplans.csv")
encounters = pd.read_csv("encounters.csv")
devices = pd.read_csv("devices.csv")
supplies = pd.read_csv("supplies.csv")
procedures = pd.read_csv("procedures.csv")
medications = pd.read_csv("medications.csv")

ID = list(patients.Id)
IDenc = list(encounters.PATIENT)
birth = list(patients.BIRTHDATE)
death = list(patients.DEATHDATE)
race = list(patients.RACE)
ethnicity = list(patients.ETHNICITY)
state = list(patients.STATE)
enc_start = list(encounters.START)
enc_end = list(encounters.STOP)
enc_code = list(encounters.CODE)
coverage = list(patients.HEALTHCARE_COVERAGE)
covid_patient_id=conditions[conditions.CODE ==840539006].PATIENT.unique()
negative_covid_patient_ids = observations[(observations.CODE =='94531-1')& (observations.VALUE == 'Not detected (qualifier value)')].PATIENT.unique()
inpatients_ids = encounters[(encounters.REASONCODE == 840539006) & (encounters.CODE == 1505002)].PATIENT
deceased_ids = np.intersect1d(covid_patient_id,patients[patients.DEATHDATE.notna()].Id)
vent_ids = procedures[(procedures.CODE == 26763009)&(procedures.PATIENT.isin(covid_patient_id))].PATIENT
icu_ids = encounters[(encounters.CODE == 305351004)&(encounters.PATIENT.isin(covid_patient_id))].PATIENT
ID[296]
encounters.DESCRIPTION[13]
x_test = pd.DataFrame()
y_test = pd.DataFrame()

a = list(range(0,len(ID)))#len(ID)
for x in a:
  x_test.loc[x,'ID'] = ID[x]
  y_test.loc[x,'ID'] = ID[x]
  x_test.loc[x,'race'] = race[x]
  x_test.loc[x,'ethnicity'] = ethnicity[x]
  x_test.loc[x,'State'] = state[x]
  x_test.loc[x,'coverage'] = coverage[x]

  if ID[x] in covid_patient_id:
    y_test.loc[x,'Covid_Status'] = 1
  elif ID[x] in negative_covid_patient_ids:
    y_test.loc[x,'Covid_Status'] = 0
  else:
    y_test.loc[x,'Covid_Status'] = 0

  if ID[x] not in deceased_ids:
    y_test.loc[x,'Alive_Status'] = 1
    b_date = datetime.strptime(birth[x], '%Y-%m-%d')
    d_date = datetime.today()
    x_test.loc[x,'age']= int((d_date-b_date).days/365)
  else:
    y_test.loc[x,'Alive_Status'] = 0
    b_date = datetime.strptime(birth[x], '%Y-%m-%d')
    d_date = datetime.strptime(death[x], '%Y-%m-%d')
    x_test.loc[x,'age']= int((d_date-b_date).days/365)

  if ID[x] in inpatients_ids:
    y_test.loc[x,'COVID_Hospitalization'] = 1
    ind0 = get_index_positions(IDenc,ID[x])
    ind1 = get_index_positions(enc_code,1505002)
    ind2 = list(set(ind0) & set(ind2))
    if not not ind2:
      b = datetime.strptime((enc_end[int(ind2[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      c = datetime.strptime((enc_start[int(ind2[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      y_test.loc[x,'DaysinHospitalization'] = round(((b-c).seconds//3600)/24,2)
    else:
      y_test.loc[x,'DaysinHospitalization'] = 0
  else:
    y_test.loc[x,'COVID_Hospitalization'] = 0
    y_test.loc[x,'DaysinHospitalization'] = 0

  if ID[x] in vent_ids:
    y_test.loc[x,'Ventilator_Status'] = 1
  else:
    y_test.loc[x,'Ventilator_Status'] = 0

  if ID[x] in icu_ids:
    y_test.loc[x,'ICU_Status'] = 1
    ind3 = get_index_positions(IDenc,ID[x])
    ind4 = get_index_positions(enc_code,305351004)
    ind5 = list(set(ind3) & set(ind4))
    if not not ind5:
      d = datetime.strptime((enc_end[int(ind5[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      e = datetime.strptime((enc_start[int(ind5[0])]).replace("T"," ").replace('Z',''), '%Y-%m-%d %H:%M:%S')
      y_test.loc[x,'DaysinICU'] = round(((d-e).seconds//3600)/24,3)
    else:
      y_test.loc[x,'DaysinICU'] = 0
  else:
    y_test.loc[x,'ICU_Status'] = 0
    y_test.loc[x,'DaysinICU'] = 0

from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential() # Initialising the ANN

classifier.add(Dense(units = 16, activation = 'relu', input_dim = 30))
classifier.add(Dense(units = 8, activation = 'relu'))
classifier.add(Dense(units = 6, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid'))

classifier.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy')
classifier.fit(X_train, Y_train, batch_size = 1, epochs = 100)
Y_pred = classifier.predict(X_test)
Y_pred = [ 1 if y>=0.5 else 0 for y in Y_pred ]

total = 0
correct = 0
wrong = 0
for i in Y_pred:
  total=total+1
  if(Y_test.at[i,0] == Y_pred[i]):
    correct=correct+1
  else:
    wrong=wrong+1

print("Total " + str(total))
print("Correct " + str(correct))
print("Wrong " + str(wrong))